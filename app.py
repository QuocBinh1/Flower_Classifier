import streamlit as st
import numpy as np
import cv2
from PIL import Image
import plotly.express as px
import plotly.graph_objects as go
import os
import sys

# Th√™m th∆∞ m·ª•c src v√†o path
sys.path.append('src')

from predict import FlowerPredictor

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="AI Flower Classifier",
    page_icon="üå∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #FF6B9D;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #4A90E2;
        margin-bottom: 1rem;
    }
    .prediction-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #FF6B9D;
        margin: 1rem 0;
    }
    .confidence-high {
        color: #28a745;
        font-weight: bold;
    }
    .confidence-medium {
        color: #ffc107;
        font-weight: bold;
    }
    .confidence-low {
        color: #dc3545;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model():
    """T·∫£i model m·ªôt l·∫ßn v√† cache"""
    try:
        predictor = FlowerPredictor()
        return predictor
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i model: {e}")
        return None

def get_confidence_color(confidence):
    """Tr·∫£ v·ªÅ m√†u s·∫Øc d·ª±a tr√™n ƒë·ªô tin c·∫≠y"""
    if confidence >= 0.8:
        return "confidence-high"
    elif confidence >= 0.6:
        return "confidence-medium"
    else:
        return "confidence-low"

def create_prediction_chart(predictions):
    """T·∫°o bi·ªÉu ƒë·ªì d·ª± ƒëo√°n"""
    classes = [pred['class'] for pred in predictions]
    probabilities = [pred['probability'] for pred in predictions]
    
    fig = go.Figure(data=[
        go.Bar(
            x=probabilities,
            y=classes,
            orientation='h',
            marker_color=['#FF6B9D' if i == 0 else '#4A90E2' for i in range(len(classes))],
            text=[f'{prob:.1%}' for prob in probabilities],
            textposition='auto',
        )
    ])
    
    fig.update_layout(
        title="K·∫øt qu·∫£ d·ª± ƒëo√°n",
        xaxis_title="X√°c su·∫•t",
        yaxis_title="Lo√†i hoa",
        xaxis=dict(range=[0, 1]),
        height=400,
        showlegend=False
    )
    
    return fig

def main():
    # Header
    st.markdown('<h1 class="main-header">üå∏ AI Flower Classifier</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">Ph√¢n lo·∫°i 5 lo√†i hoa: Daisy, Dandelion, Rose, Sunflower, Tulip</p>', unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("üå∫ C√†i ƒë·∫∑t")
    
    # T·∫£i model
    with st.spinner("ƒêang t·∫£i model..."):
        predictor = load_model()
    
    if predictor is None:
        st.error("Kh√¥ng th·ªÉ t·∫£i model. Vui l√≤ng ki·ªÉm tra l·∫°i file model.")
        return
    
    # Th√¥ng tin model
    st.sidebar.markdown("### üìä Th√¥ng tin Model")
    st.sidebar.info(f"**Lo√†i hoa ƒë∆∞·ª£c h·ªó tr·ª£:** {', '.join(predictor.flower_classes)}")
    
    # Upload ·∫£nh
    st.markdown('<h2 class="sub-header">üì∏ Upload ·∫£nh hoa</h2>', unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "Ch·ªçn ·∫£nh hoa ƒë·ªÉ ph√¢n lo·∫°i",
        type=['jpg', 'jpeg', 'png'],
        help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng JPG, JPEG, PNG"
    )
    
    # Demo ·∫£nh
    st.markdown("### üéØ Ho·∫∑c ch·ªçn ·∫£nh demo:")
    demo_cols = st.columns(5)
    
    demo_images = {}
    for i, flower_class in enumerate(predictor.flower_classes):
        with demo_cols[i]:
            # T√¨m ·∫£nh demo trong th∆∞ m·ª•c flowers
            demo_path = None
            flower_dir = os.path.join('flowers', flower_class)
            if os.path.exists(flower_dir):
                for img_name in os.listdir(flower_dir):
                    if img_name.lower().endswith(('.jpg', '.jpeg', '.png')):
                        demo_path = os.path.join(flower_dir, img_name)
                        break
                    if demo_path:
                        break
            
            if demo_path and st.button(f"Demo {flower_class.title()}", key=f"demo_{flower_class}"):
                demo_images[flower_class] = demo_path
    
    # X·ª≠ l√Ω ·∫£nh
    image_to_process = None
    
    if uploaded_file is not None:
        # X·ª≠ l√Ω ·∫£nh upload
        image = Image.open(uploaded_file)
        st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
        
        # L∆∞u ·∫£nh t·∫°m th·ªùi
        temp_path = "temp_upload.jpg"
        image.save(temp_path)
        image_to_process = temp_path
        
    elif demo_images:
        # X·ª≠ l√Ω ·∫£nh demo
        flower_class, demo_path = list(demo_images.items())[0]
        image = Image.open(demo_path)
        st.image(image, caption=f"Demo ·∫£nh {flower_class}", use_column_width=True)
        image_to_process = demo_path
    
    # D·ª± ƒëo√°n
    if image_to_process:
        st.markdown('<h2 class="sub-header">üîÆ K·∫øt qu·∫£ d·ª± ƒëo√°n</h2>', unsafe_allow_html=True)
        
        with st.spinner("ƒêang ph√¢n t√≠ch ·∫£nh..."):
            try:
                # D·ª± ƒëo√°n
                result = predictor.predict_image(image_to_process)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ch√≠nh
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    st.markdown('<div class="prediction-box">', unsafe_allow_html=True)
                    st.markdown(f"**Lo√†i hoa d·ª± ƒëo√°n:** {result['predicted_class'].title()}")
                    
                    confidence_class = get_confidence_color(result['confidence'])
                    st.markdown(f"**ƒê·ªô tin c·∫≠y:** <span class='{confidence_class}'>{result['confidence']:.1%}</span>", 
                              unsafe_allow_html=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    # Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
                    fig = create_prediction_chart(result['all_predictions'])
                    st.plotly_chart(fig, use_container_width=True)
                
                # B·∫£ng chi ti·∫øt
                st.markdown("### üìã Chi ti·∫øt d·ª± ƒëo√°n")
                prediction_df = {
                    'Lo√†i hoa': [pred['class'].title() for pred in result['all_predictions']],
                    'X√°c su·∫•t': [f"{pred['probability']:.1%}" for pred in result['all_predictions']],
                    'Th·ª© h·∫°ng': [pred['rank'] for pred in result['all_predictions']]
                }
                
                import pandas as pd
                df = pd.DataFrame(prediction_df)
                st.dataframe(df, use_container_width=True)
                
                # X√≥a file t·∫°m n·∫øu c√≥
                if image_to_process == "temp_upload.jpg" and os.path.exists("temp_upload.jpg"):
                    os.remove("temp_upload.jpg")
                    
            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>üå∏ AI Flower Classifier - S·ª≠ d·ª•ng Deep Learning ƒë·ªÉ ph√¢n lo·∫°i hoa üå∏</p>
        <p>Model: CNN v·ªõi Transfer Learning | Framework: TensorFlow/Keras</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 